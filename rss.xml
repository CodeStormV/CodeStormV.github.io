<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CodeStorm</title>
        <link>https://codestormv.github.io/</link>
        <description></description>
        <generator>Hugo 0.117.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 20 Oct 2023 17:17:48 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://codestormv.github.io/rss.xml" />
        
        
            <item>
                <title>Git | 设置子目录执行相同命令</title>
                <link>https://codestormv.github.io/posts/git/git_set_submodule_execute_the_same_git_command/git_set_submodule_execute_the_same_git_command/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/git/git_set_submodule_execute_the_same_git_command/git_set_submodule_execute_the_same_git_command/</guid>
                <pubDate>Thu, 19 Oct 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;ol&gt;
&lt;li&gt;在控制台输入：&lt;br&gt;
&lt;code&gt;git config alias.sync &#39;!f(){ git &amp;quot;$@&amp;quot; &amp;amp;&amp;amp; cd public &amp;amp;&amp;amp; git &amp;quot;$@&amp;quot;; }; f&#39;&lt;/code&gt;&lt;br&gt;
或者&lt;br&gt;
&lt;code&gt;git config alias.sync &amp;quot;!f(){ git \&amp;quot;$@\&amp;quot; &amp;amp;&amp;amp; git -C public \&amp;quot;$@\&amp;quot;; }; f&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后输入：&lt;code&gt;git sync 命令&lt;/code&gt; 如 &lt;code&gt;git sync commit -m &amp;quot;提交信息&amp;quot;&lt;/code&gt; 就可以达到子目录执行相同的命令&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
            <item>
                <title>Python | self 的使用</title>
                <link>https://codestormv.github.io/posts/python/self-use/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/python/self-use/</guid>
                <pubDate>Wed, 30 Aug 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;self&#34;&gt;self&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;self 在类中出现&lt;/li&gt;
&lt;li&gt;表示类实例自身的引用，可以调用实例的属性和方法&lt;/li&gt;
&lt;li&gt;使用 self 的变量作用域在整个类中&lt;/li&gt;
&lt;li&gt;不使用 self 的变量作用域在整个方法中&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2709821&#34;&gt;What is the purpose of the &lt;code&gt;self&lt;/code&gt; parameter? Why is it needed?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
            <item>
                <title>Python | 包管理</title>
                <link>https://codestormv.github.io/posts/python/package-manage/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/python/package-manage/</guid>
                <pubDate>Mon, 28 Aug 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;安装所有-pip-包&#34;&gt;安装所有 pip 包&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install -r requirement.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-r&lt;/code&gt; 指定文件&lt;/p&gt;
&lt;h2 id=&#34;删除所有-pip-的包&#34;&gt;删除所有 pip 的包&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;br&gt;
freeze 是指将当前环境中安装的所有包及其版本信息列出，并将其输出到一个文本文件中
&lt;code&gt;pip uninstall -r requirements.txt -y&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-r&lt;/code&gt; 指定文件&lt;br&gt;
&lt;code&gt;-y&lt;/code&gt; 默认选择同意&lt;/p&gt;
&lt;h2 id=&#34;pipreqs-导出所有依赖包&#34;&gt;pipreqs 导出所有依赖包&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装 pipreqs &lt;code&gt;pip install pipreqs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipreqs ./ --encoding=utf-8&lt;/code&gt; （导出所有项目依赖包，&lt;code&gt;--encoding=utf-8&lt;/code&gt; 代表用 &lt;code&gt;utf-8编码&lt;/code&gt; 来处理）&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
            <item>
                <title>Python | 报错 Failed building wheel</title>
                <link>https://codestormv.github.io/posts/python/failed-building-wheel/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/python/failed-building-wheel/</guid>
                <pubDate>Mon, 28 Aug 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;报错&#34;&gt;报错&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ERROR: Failed building wheel for XXX&lt;/li&gt;
&lt;li&gt;ERROR: Could not build wheels for XXX, which is required to install pyproject.toml-based projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原因：缺少 &lt;code&gt;whl&lt;/code&gt; 文件&lt;br&gt;
解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到官网下载 &lt;code&gt;whl&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;pip install &amp;quot;文件路径&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 提示 &lt;code&gt;ERROR: 文件名 is not a supported wheel on this platform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将文件中的 &lt;code&gt;cpXXX&lt;/code&gt; 改为当前 &lt;code&gt;python&lt;/code&gt; 对应版本 如 &lt;code&gt;cp311&lt;/code&gt; ，再次执行安装即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuangan1529/article/details/116696624&#34;&gt;python 解决 Failed building wheel for XXX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
            <item>
                <title>VSCode | 文件转移</title>
                <link>https://codestormv.github.io/posts/vscode/vscode_file_transfer/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/vscode/vscode_file_transfer/</guid>
                <pubDate>Mon, 28 Aug 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;文件转移&#34;&gt;文件转移&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;VSCode&lt;/code&gt; 会在 C 盘占用一部分空间，进行文件链接转移文件位置。
文件位置一般位于 &lt;code&gt;C:\Users\用户名\AppData\Roaming\Code&lt;/code&gt; 和 &lt;code&gt;C:\User\用户名\.vscode&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;操作&#34;&gt;操作：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;剪切位于 C 盘的 &lt;code&gt;VSCode&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;粘贴到想要转移的位置&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;cmd&lt;/code&gt; 输入&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mklink /J &amp;#34;%APPDATA%\Code&amp;#34; &amp;#34;目标目录&amp;#34;
mklink /J &amp;#34;%USERPROFILE%\.vscode&amp;#34; &amp;#34;目标目录&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;%APPDATA%&lt;/code&gt; 代表 &lt;code&gt;C:\Users\用户名\AppData\Roaming&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%USERPROFILE%&lt;/code&gt; 代表 &lt;code&gt;C:\User\用户名&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;完成文件转移&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_53510183/article/details/126906182&#34;&gt;VSCode 修改扩展和用户文件夹目录位置 (Windows)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
            <item>
                <title>Windows | mklink 的使用</title>
                <link>https://codestormv.github.io/posts/windows/mklink/</link>
                <guid isPermaLink="true">https://codestormv.github.io/posts/windows/mklink/</guid>
                <pubDate>Sun, 27 Aug 2023 00:00:00 &#43;0000</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;mklink&#34;&gt;mklink&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;MKLINK&lt;/span&gt; [[/D] &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; [/H] &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; [/J]] Link Target
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        /D      创建目录符号链接。默认为文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                符号链接。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        /H      创建硬链接而非符号链接。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        /J      创建目录联接。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Link    指定新的符号链接名称。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Target  指定新链接引用的路径
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;相对或绝对&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;使用-d&#34;&gt;使用 /d&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建目录符号链接。默认情况下，此命令创建文件符号链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只能链接文件夹
link 不占用硬盘空间&lt;br&gt;
link 位置改变，链接失效，返回原来位置链接恢复
link 被复制：原文件内容被复制&lt;br&gt;
link 改名，链接保持&lt;br&gt;
原文件位置改变，链接失效，返回原来位置链接恢复&lt;br&gt;
原文件改名，链接失效，改回名字链接恢复&lt;/p&gt;
&lt;h3 id=&#34;使用-j&#34;&gt;使用 /j&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建目录交叉点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只能链接文件夹&lt;br&gt;
link 不占用硬盘空间&lt;br&gt;
link 位置改变：link 移动到的位置变为文件夹而不是链接，将原文件内容移动到 link 移动后的文件夹内，但是原文件和原 link 保持不变，只是内容被转移&lt;br&gt;
link 被复制：原文件内容被复制&lt;br&gt;
link 改名，链接保持&lt;br&gt;
原文件位置改变：链接失效，返回原来位置链接恢复&lt;br&gt;
原文件改名：链接失效，改回原名链接恢复&lt;/p&gt;
&lt;h3 id=&#34;使用-h&#34;&gt;使用 /h&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建硬链接而不是符号链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;硬链接
只能链接文件&lt;br&gt;
link 似乎占用空间&lt;br&gt;
link 位置改变，链接不失效&lt;br&gt;
link 被复制：原文件内容被复制&lt;br&gt;
link 改名，链接保持
原文件改变位置，链接不失效&lt;br&gt;
原文件改名，链接不失效&lt;/p&gt;
&lt;h3 id=&#34;不使用&#34;&gt;不使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建符号链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;符号链接
link 不占用硬盘空间&lt;br&gt;
link 位置改变，链接失效，返回原来位置链接恢复&lt;br&gt;
link 被复制：原文件内容被复制&lt;br&gt;
link 改名，链接保持
原文件位置改变，链接失效，返回原来位置链接恢复&lt;br&gt;
原文件改名：链接失效，改回原名链接恢复&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/d&lt;/code&gt; 与 &lt;code&gt;/j&lt;/code&gt; 区别在于 &lt;code&gt;link&lt;/code&gt; 位置改变之后内容是否转移。
&lt;code&gt;/d&lt;/code&gt; 与 &lt;code&gt;不使用&lt;/code&gt; 区别在于内容是 &lt;code&gt;文件&lt;/code&gt; 还是 &lt;code&gt;文件夹&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/notback/article/details/73604292&#34;&gt;关于 mklink 的/D /J 区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                    
                
                
                
            </item>
        
    </channel>
</rss>
