[{"categories":["posts"],"content":" 在控制台输入：\ngit config alias.sync '!f(){ git \"$@\" \u0026\u0026 cd public \u0026\u0026 git \"$@\"; }; f'\n或者\ngit config alias.sync \"!f(){ git \\\"$@\\\" \u0026\u0026 git -C public \\\"$@\\\"; }; f\" 然后输入：git sync 命令 如 git sync commit -m \"提交信息\" 就可以达到子目录执行相同的命令 ","description":"","title":"Git | 设置子目录执行相同命令","uri":"/posts/git/git_set_submodule_execute_the_same_git_command/git_set_submodule_execute_the_same_git_command/"},{"categories":["posts"],"content":"self self 在类中出现 表示类实例自身的引用，可以调用实例的属性和方法 使用 self 的变量作用域在整个类中 不使用 self 的变量作用域在整个方法中 参考 What is the purpose of the self parameter? Why is it needed?\n","description":"","title":"Python | self 的使用","uri":"/posts/python/self-use/"},{"categories":["posts"],"content":"安装所有 pip 包 pip install -r requirement.txt\n-r 指定文件\n删除所有 pip 的包 pip freeze \u003e requirements.txt\nfreeze 是指将当前环境中安装的所有包及其版本信息列出，并将其输出到一个文本文件中 pip uninstall -r requirements.txt -y\n-r 指定文件\n-y 默认选择同意\npipreqs 导出所有依赖包 安装 pipreqs pip install pipreqs pipreqs ./ --encoding=utf-8 （导出所有项目依赖包，--encoding=utf-8 代表用 utf-8编码 来处理） ","description":"","title":"Python | 包管理","uri":"/posts/python/package-manage/"},{"categories":["posts"],"content":"报错 ERROR: Failed building wheel for XXX ERROR: Could not build wheels for XXX, which is required to install pyproject.toml-based projects 原因：缺少 whl 文件\n解决：\n到官网下载 whl 文件 执行 pip install \"文件路径\" 如果 提示 ERROR: 文件名 is not a supported wheel on this platform 将文件中的 cpXXX 改为当前 python 对应版本 如 cp311 ，再次执行安装即可 参考 python 解决 Failed building wheel for XXX\n","description":"","title":"Python | 报错 Failed building wheel","uri":"/posts/python/failed-building-wheel/"},{"categories":["posts"],"content":"文件转移 VSCode 会在 C 盘占用一部分空间，进行文件链接转移文件位置。 文件位置一般位于 C:\\Users\\用户名\\AppData\\Roaming\\Code 和 C:\\User\\用户名\\.vscode\n操作： 剪切位于 C 盘的 VSCode 文件 粘贴到想要转移的位置 打开 cmd 输入 mklink /J \"%APPDATA%\\Code\" \"目标目录\"\rmklink /J \"%USERPROFILE%\\.vscode\" \"目标目录\" %APPDATA% 代表 C:\\Users\\用户名\\AppData\\Roaming\n%USERPROFILE% 代表 C:\\User\\用户名\n完成文件转移 参考 VSCode 修改扩展和用户文件夹目录位置 (Windows)\n","description":"","title":"VSCode | 文件转移","uri":"/posts/vscode/vscode_file_transfer/"},{"categories":["posts"],"content":"mklink 1 2 3 4 5 6 7 8 9 MKLINK [[/D] | [/H] | [/J]] Link Target /D 创建目录符号链接。默认为文件 符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径 (相对或绝对)。 使用 /d 创建目录符号链接。默认情况下，此命令创建文件符号链接。\n只能链接文件夹 link 不占用硬盘空间\nlink 位置改变，链接失效，返回原来位置链接恢复 link 被复制：原文件内容被复制\nlink 改名，链接保持\n原文件位置改变，链接失效，返回原来位置链接恢复\n原文件改名，链接失效，改回名字链接恢复\n使用 /j 创建目录交叉点。\n只能链接文件夹\nlink 不占用硬盘空间\nlink 位置改变：link 移动到的位置变为文件夹而不是链接，将原文件内容移动到 link 移动后的文件夹内，但是原文件和原 link 保持不变，只是内容被转移\nlink 被复制：原文件内容被复制\nlink 改名，链接保持\n原文件位置改变：链接失效，返回原来位置链接恢复\n原文件改名：链接失效，改回原名链接恢复\n使用 /h 创建硬链接而不是符号链接。\n硬链接 只能链接文件\nlink 似乎占用空间\nlink 位置改变，链接不失效\nlink 被复制：原文件内容被复制\nlink 改名，链接保持 原文件改变位置，链接不失效\n原文件改名，链接不失效\n不使用 创建符号链接\n符号链接 link 不占用硬盘空间\nlink 位置改变，链接失效，返回原来位置链接恢复\nlink 被复制：原文件内容被复制\nlink 改名，链接保持 原文件位置改变，链接失效，返回原来位置链接恢复\n原文件改名：链接失效，改回原名链接恢复\n总结 /d 与 /j 区别在于 link 位置改变之后内容是否转移。 /d 与 不使用 区别在于内容是 文件 还是 文件夹\n参考 关于 mklink 的/D /J 区别\n","description":"","title":"Windows | mklink 的使用","uri":"/posts/windows/mklink/"}]
